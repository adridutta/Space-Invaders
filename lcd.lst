


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 400043FC 
                       GPIO_PORTA_DATA_R
                               EQU              0x400043FC
   23 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   24 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   25 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   26 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   27 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   28 00000000         
   29 00000000                 EXPORT           writecommand
   30 00000000                 EXPORT           writedata
   31 00000000         
   32 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   33 00000000                 THUMB
   34 00000000                 ALIGN
   35 00000000         
   36 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   37 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   38 00000000         ; that are 8 locations deep.  Based on the observation t



ARM Macro Assembler    Page 2 


                       hat
   39 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   40 00000000         ; lot of data, the FIFOs are not used when writing
   41 00000000         ; commands, and they are used when writing data.  This
   42 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   43 00000000         ; that is actually being transmitted.
   44 00000000         ; The write command operation waits until all data has b
                       een
   45 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   46 00000000         ; the command, and then waits for the transmission to
   47 00000000         ; finish.
   48 00000000         ; The write data operation waits until there is room in 
                       the
   49 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   50 00000000         ; and then adds the data to the transmit FIFO.
   51 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   52 00000000         ; the SSI0 module is not initialized and enabled.
   53 00000000         
   54 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   55 00000000         ; Input: R0  8-bit command to transmit
   56 00000000         ; Output: none
   57 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   58 00000000         writecommand
   59 00000000         ;1) Read SSI0_SR_R and check bit 4, 
   60 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   61 00000000         ;3) Clear D/C=PA6 to zero
   62 00000000         ;4) Write the command to SSI0_DR_R
   63 00000000         ;5) Read SSI0_SR_R and check bit 4, 
   64 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   65 00000000         
   66 00000000         
   67 00000000 B4F0            PUSH             { R4 - R7 }
   68 00000002         Again
   69 00000002 4C11            LDR              R4, =SSI0_SR_R
   70 00000004 6825            LDR              R5, [R4]
   71 00000006 F015 0610       ANDS             R6, R5, #0x00000010
   72 0000000A D1FA            BNE              Again
   73 0000000C         
   74 0000000C 4C0F            LDR              R4, =GPIO_PORTA_DATA_R 
                                                            ; clear PA6
   75 0000000E 6825            LDR              R5, [R4]
   76 00000010 F025 0540       BIC              R5, #0x40
   77 00000014 6025            STR              R5, [R4]
   78 00000016         
   79 00000016 4C0E            LDR              R4, =SSI0_DR_R
   80 00000018 7020            STRB             R0, [R4]
   81 0000001A         
   82 0000001A         Again2
   83 0000001A 4C0B            LDR              R4, = SSI0_SR_R
   84 0000001C 6825            LDR              R5, [R4]



ARM Macro Assembler    Page 3 


   85 0000001E F015 0610       ANDS             R6, R5, #0x00000010
   86 00000022 D1FA            BNE              Again2
   87 00000024         
   88 00000024 BCF0            POP              {R4 - R7}
   89 00000026         
   90 00000026         
   91 00000026 4770            BX               LR
   92 00000028         
   93 00000028         
   94 00000028         
   95 00000028         
   96 00000028         
   97 00000028         
   98 00000028         
   99 00000028         
  100 00000028         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
  101 00000028         ; Input: R0  8-bit data to transmit
  102 00000028         ; Output: none
  103 00000028         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
  104 00000028         writedata
  105 00000028         ;1) Read SSI0_SR_R and check bit 1, 
  106 00000028         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
  107 00000028         ;3) Set D/C=PA6 to one
  108 00000028         ;4) Write the 8-bit data to SSI0_DR_R
  109 00000028 B430            PUSH             {R4, R5}
  110 0000002A         
  111 0000002A         WriteAgain
  112 0000002A         
  113 0000002A 4C07            LDR              R4, = SSI0_SR_R
  114 0000002C 6825            LDR              R5, [R4]
  115 0000002E F015 0502       ANDS             R5, #0x02
  116 00000032 D0FA            BEQ              WriteAgain
  117 00000034         
  118 00000034 4C05            LDR              R4, = GPIO_PORTA_DATA_R
  119 00000036 6825            LDR              R5, [R4]
  120 00000038 F045 0540       ORR              R5, #0x40
  121 0000003C 6025            STR              R5, [R4]
  122 0000003E         
  123 0000003E 4C04            LDR              R4, = SSI0_DR_R
  124 00000040 7020            STRB             R0, [R4]
  125 00000042         
  126 00000042 BC30            POP              {R4, R5}
  127 00000044         
  128 00000044 4770            BX               LR
  129 00000046         
  130 00000046         
  131 00000046         
  132 00000046         
  133 00000046         
  134 00000046         ;***************************************************
  135 00000046         ; This is a library for the Adafruit 1.8" SPI display.
  136 00000046         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  137 00000046         ; ----> http://www.adafruit.com/products/358
  138 00000046         ; as well as Adafruit raw 1.8" TFT display
  139 00000046         ; ----> http://www.adafruit.com/products/618



ARM Macro Assembler    Page 4 


  140 00000046         ;
  141 00000046         ; Check out the links above for our tutorials and wiring
                        diagrams
  142 00000046         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  143 00000046         ; interface (RST is optional)
  144 00000046         ; Adafruit invests time and resources providing this ope
                       n source code,
  145 00000046         ; please support Adafruit and open-source hardware by pu
                       rchasing
  146 00000046         ; products from Adafruit!
  147 00000046         ;
  148 00000046         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  149 00000046         ; MIT license, all text above must be included in any re
                       distribution
  150 00000046         ;****************************************************
  151 00000046         
  152 00000046 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  153 00000048                 END                          ; end of file
              4000800C 
              400043FC 
              40008008 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lcd.d 
-o.\lcd.o -I"C:\Users\Adri\Desktop\Embedded Systems\ARM\RV31\INC" -I"C:\Users\A
dri\Desktop\Embedded Systems\ARM\CMSIS\Include" -I"C:\Users\Adri\Desktop\Embedd
ed Systems\ARM\Inc\Luminary" --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 32 in file LCD.s
   Uses
      None
Comment: .text unused
Again 00000002

Symbol: Again
   Definitions
      At line 68 in file LCD.s
   Uses
      At line 72 in file LCD.s
Comment: Again used once
Again2 0000001A

Symbol: Again2
   Definitions
      At line 82 in file LCD.s
   Uses
      At line 86 in file LCD.s
Comment: Again2 used once
WriteAgain 0000002A

Symbol: WriteAgain
   Definitions
      At line 111 in file LCD.s
   Uses
      At line 116 in file LCD.s
Comment: WriteAgain used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 58 in file LCD.s
   Uses
      At line 29 in file LCD.s
Comment: writecommand used once
writedata 00000028

Symbol: writedata
   Definitions
      At line 104 in file LCD.s
   Uses
      At line 30 in file LCD.s
Comment: writedata used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTA_DATA_R 400043FC

Symbol: GPIO_PORTA_DATA_R
   Definitions
      At line 22 in file LCD.s
   Uses
      At line 74 in file LCD.s
      At line 118 in file LCD.s

SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 23 in file LCD.s
   Uses
      At line 79 in file LCD.s
      At line 123 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 69 in file LCD.s
      At line 83 in file LCD.s
      At line 113 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 26 in file LCD.s
   Uses
      None
Comment: SSI_SR_BSY unused
SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE
   Definitions
      At line 25 in file LCD.s
   Uses
      None
Comment: SSI_SR_RNE unused
SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 27 in file LCD.s
   Uses
      None
Comment: SSI_SR_TNF unused
6 symbols
344 symbols in table
